airconv_src = [
 'airconv_context.cpp',
 'air_type.cpp',
 'air_signature.cpp',
 'dxbc_converter.cpp',
 'metallib_writer.cpp'
]

# generated by llvm-config --libs bitwriter passes
llvm_deps = [
 '-lLLVMPasses' ,'-lLLVMTarget' ,'-lLLVMObjCARCOpts' ,
 '-lLLVMCoroutines', '-lLLVMipo', '-lLLVMInstrumentation',
 '-lLLVMVectorize', '-lLLVMLinker', '-lLLVMIRReader', 
 '-lLLVMAsmParser',
 '-lLLVMFrontendOpenMP', '-lLLVMScalarOpts', '-lLLVMInstCombine', 
 '-lLLVMAggressiveInstCombine', '-lLLVMTransformUtils', 
 '-lLLVMBitWriter', '-lLLVMAnalysis', '-lLLVMProfileData', 
 '-lLLVMSymbolize', '-lLLVMDebugInfoPDB', '-lLLVMDebugInfoMSF', 
 '-lLLVMDebugInfoDWARF', '-lLLVMObject', '-lLLVMTextAPI', '-lLLVMMCParser', 
 '-lLLVMMC', '-lLLVMDebugInfoCodeView',
 '-lLLVMBitReader', '-lLLVMCore', '-lLLVMRemarks', '-lLLVMBitstreamReader', 
 '-lLLVMBinaryFormat', '-lLLVMSupport', '-lLLVMDemangle'
]

llvm_cxx_flags = [
 '-fno-exceptions','-funwind-tables','-fno-rtti','-D_FILE_OFFSET_BITS=64',
 '-D__STDC_CONSTANT_MACROS','-D__STDC_FORMAT_MACROS','-D__STDC_LIMIT_MACROS'
]

llvm_ld_flags = [
 '-L'+join_paths(meson.source_root(), 'toolchains/llvm/lib')
]

llvm_include_path = include_directories('../../toolchains/llvm/include') # FIXME: in favor of path relative to project

airconv_lib = static_library('airconv', airconv_src,
  include_directories : [ dxmt_include_path, llvm_include_path ],
  cpp_args       : llvm_cxx_flags,
  dependencies        : [ DXBCParser_dep ],
  link_args           : llvm_ld_flags
)

airconv_dep = declare_dependency(
  link_with           : [ airconv_lib ],
  include_directories : [ dxmt_include_path ],
  link_args           : [ llvm_ld_flags, llvm_deps ] # meh
)

executable('airconv', airconv_src + ['airconv_cli.cpp'],
  include_directories : [ dxmt_include_path, llvm_include_path ],
  cpp_args            : llvm_cxx_flags,
  dependencies        : [ DXBCParser_dep ],
  link_args           : [ llvm_ld_flags, llvm_deps ]
)
